@page "/football/standings"

@layout DystirLayout
@implements IDisposable

<div id="competitions_selection">
    <ChooseCompetitions CompetitionsList="@(StandingsView?.CompetitionsList?.ToList())"
                        SelectedCompetition="@(StandingsView?.SelectedCompetition)"
                        CompetitionsOnClick="@(CompetitionsOnClick)" />
</div>
<div id="main_container">
    <div class="standings_table pt-2">
        <table class="content_table">
            @if (StandingsView?.Standing?.TeamStandings?.Count() > 0 == true)
            {
                <tr id="standings_header">
                    <td class="standings_cell standings_cell_number">Nr</td>
                    <td class="standings_cell standings_cell_team_name_title">LIÐ</td>
                    <td class="standings_cell font-weight-bold">ST</td>
                    <td class="standings_cell">DS</td>
                    <td class="standings_cell">VD</td>
                    <td class="standings_cell">JD</td>
                    <td class="standings_cell">TD</td>
                    <td class="standings_cell">MF</td>
                    <td class="standings_cell">MÍ</td>
                    <td class="standings_cell">MM</td>
                </tr>
            }
            @foreach (var teamStanding in StandingsView?.Standing?.TeamStandings ?? new List<TeamStanding>())
            {
                <tr style="border-bottom:1px solid @teamStanding.PositionColor">
                    <td class="standings_cell standings_cell_number">
                        <div>
                            <i class="@(teamStanding.IsLive == true ? "fas fa-circle live_standings_indicator" : "")"></i>
                            <span>@(teamStanding.Position).</span>
                        </div>
                    </td>
                    <td class="standings_cell standings_cell_team_name">@teamStanding.Team</td>
                    <td class="standings_cell text-white font-weight-bold">@teamStanding.Points</td>
                    <td class="standings_cell">@teamStanding.MatchesNo</td>
                    <td class="standings_cell">@teamStanding.Victories</td>
                    <td class="standings_cell">@teamStanding.Draws</td>
                    <td class="standings_cell">@teamStanding.Losses</td>
                    <td class="standings_cell">@teamStanding.GoalScored</td>
                    <td class="standings_cell">@teamStanding.GoalAgainst</td>
                    <td class="standings_cell">@teamStanding.GoalDifference</td>
                </tr>
            }
        </table>
    </div>
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    private StandingsModelView StandingsView;
    private bool isLoading = true;
    private string _competition;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        await LoadStandings(_competition, false);
        isLoading = true;
        _ = LoadStandings(_competition, true);
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await LoadStandings(_competition, true);
    }

    private async void HubConnection_OnConnected()
    {
        await LoadStandings(_competition, true);
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async void CompetitionsOnClick(string competition)
    {
        isLoading = true;
        _competition = competition;
        _ = LoadStandings(_competition, false);
        await Task.CompletedTask;
    }

    public async Task LoadStandings(string selectedCompetition, bool loadFromServer)
    {
        var standings = loadFromServer ? await DystirWebClientService.GetStandings() : DystirWebClientService.Standings;

        selectedCompetition = string.IsNullOrWhiteSpace(selectedCompetition) ? standings?.FirstOrDefault().StandingCompetitionName ?? string.Empty : selectedCompetition;
        Standing standing = standings?.FirstOrDefault(x => x.StandingCompetitionName == selectedCompetition);
        StandingsView = new StandingsModelView()
        {
            SelectedCompetition = selectedCompetition,
            CompetitionsList = GetCompetitionsList(standings),
            Standing = standing
        };
        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private IEnumerable<string> GetCompetitionsList(ObservableCollection<Standing> standings)
    {
        List<string> competitionsList = new List<string>();
        foreach (var standing in standings ?? new ObservableCollection<Standing>())
        {
            competitionsList.Add(standing.StandingCompetitionName);
        }
        return competitionsList;
    }
}

