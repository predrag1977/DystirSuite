@page "/football/statistics"

@layout MainFootballLayout
@implements IDisposable


<div id="competitions_selection">
    <ChooseCompetitions CompetitionsList="@(FullStatistics?.CompetitionsList?.ToList())" 
                        SelectedCompetition="@(FullStatistics?.SelectedCompetition)"
                        CompetitionsOnClick="@(CompetitionsOnClick)" />
</div>
<div id="main_container">
    @if (FullStatistics?.CompetitionStatistic != null)
    {
        <table class="lineups content_table">
            <tr>
                <td class="statistics_title">
                    <span>Málskjúttar</span>
                    <div class="statistics_border" />
                </td>
                <td class="statistics_title">
                    <span>Upplegg</span>
                    <div class="statistics_border" />
                </td>
            </tr>
            <tr>
                <td class="align-top">
                    @for (int i = 0; i < FullStatistics.CompetitionStatistic.GoalPlayers.Count; i++)
                    {
                        PlayersOfMatches Player = FullStatistics.CompetitionStatistic.GoalPlayers[i];
                        <div class="player-list-item">
                            <table class="content_table text-left">
                                <tr>
                                    <td class="statistics_number">
                                        @(string.Format("{0}.", i + 1))
                                    </td>
                                    <td>
                                        <div class="player_name">
                                            @((Player.FirstName + " " + Player.Lastname).Trim())
                                        </div>
                                        <div class="statistics_team">
                                            @(Player.TeamName)
                                        </div>
                                    </td>
                                    <td class="statistics_goal">@Player.Goal</td>
                                </tr>
                            </table>
                        </div>
                    }
                </td>
                <td class="align-top">
                    @for (int i = 0; i < FullStatistics.CompetitionStatistic.AssistPlayers.Count; i++)
                    {
                        PlayersOfMatches Player = FullStatistics.CompetitionStatistic.AssistPlayers[i];
                        <div class="player-list-item">
                            <table class="content_table text-left">
                                <tr>
                                    <td class="statistics_number">
                                        @(string.Format("{0}.", i + 1))
                                    </td>
                                    <td>
                                        <div class="player_name">
                                            @((Player.FirstName + " " + Player.Lastname).Trim())
                                        </div>
                                        <div class="statistics_team">
                                            @(Player.TeamName)
                                        </div>
                                    </td>
                                    <td class="statistics_asist">@Player.Assist</td>
                                </tr>
                            </table>
                        </div>
                    }
                </td>
            </tr>
        </table>
    }
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color:darkgrey"></i>
    </div>
}

@code {

    private FullStatisticModelView FullStatistics;
    private bool isLoading = true;
    string _competition;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        await GetStatisticsList(_competition, false);
        isLoading = true;
        _ = GetStatisticsList(_competition, true);
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetStatisticsList(_competition, true);
    }

    private async void HubConnection_OnConnected()
    {
        await GetStatisticsList(_competition, true);
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void CompetitionsOnClick(string competition)
    {
        isLoading = true;
        _competition = competition;
        _ = GetStatisticsList(_competition, false);
    }

    public async Task GetStatisticsList(string selectedCompetition, bool loadFromServer)
    {
        var statisticCompetitions = loadFromServer ? await DystirWebClientService.GetCompetitionStatistics() : DystirWebClientService.CompetitionStatistics;
        selectedCompetition = string.IsNullOrWhiteSpace(selectedCompetition) ? statisticCompetitions?.FirstOrDefault()?.CompetitionName ?? string.Empty : selectedCompetition;
        CompetitionStatistic competitionStatistic = statisticCompetitions?.FirstOrDefault(x => x.CompetitionName == selectedCompetition);
        FullStatisticModelView fullStatistics = new FullStatisticModelView()
        {
            SelectedCompetition = selectedCompetition,
            CompetitionsList = GetCompetitionsList(statisticCompetitions),
            CompetitionStatistic = competitionStatistic
        };
        FullStatistics = fullStatistics;

        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private IEnumerable<string> GetCompetitionsList(ObservableCollection<CompetitionStatistic> statisticCompetitions)
    {
        List<string> competitionsList = new List<string>();
        foreach (var statistic in statisticCompetitions ?? new ObservableCollection<CompetitionStatistic>())
        {
            competitionsList.Add(statistic.CompetitionName);
        }
        return competitionsList;
    }
}
