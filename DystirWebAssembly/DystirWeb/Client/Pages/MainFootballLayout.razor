@using DystirWeb.Services
@inject DystirWebClientService DystirWebClientService
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@implements IDisposable

<link href="css/football.css?v=55" rel="stylesheet" />

<div class="header">
    <Header />
</div>

<div class="container-layout">
    @Body
</div>

<div class="sidebar">
    <NavMenuFootball />
</div>

<div class="sponsor-bar">
    <SponsorsView ShowOnSideBar="true" />
</div>

@if (!IsDystirHubConnected)
{
    <div class="loading-spinner-parent">
        <img class="loading-spinner" src="images/icons/loadingicon.gif"/>
    </div>
}

@code {

    public bool IsDystirHubConnected = true;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnDisconnected += HubConnection_OnDisconnected;
        _ = DystirWebClientService.StartUpAsync();
        await JSRuntime.InvokeVoidAsync("setTitle", "Dystir");
        await JSRuntime.InvokeVoidAsync("loadGoogleAnalytics", "170595956-1");
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnDisconnected -= HubConnection_OnDisconnected;
    }

    private async void HubConnection_OnConnected()
    {
        IsDystirHubConnected = true;
        Refresh();
        await Task.CompletedTask;
    }

    private async void HubConnection_OnDisconnected()
    {
        IsDystirHubConnected = false;
        Refresh();
        await Task.CompletedTask;
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }
}






