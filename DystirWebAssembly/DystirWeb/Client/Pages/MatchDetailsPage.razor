@page "/football/matchdetails/{matchid}"

@using DystirWeb.Shared
@using DystirWeb.Services
@using ViewBases
@using Microsoft.AspNetCore.SignalR.Client
@inject DystirWebClientService DystirWebClientService
@inject TimeService TimeService
@inject LiveStandingService LiveStandingService
@inject HubConnection HubConnection
@layout MainFootballLayout
@implements IDisposable
@inherits MatchBase

<div class="container-match-details">
    <div class="box">
        <div class="matches_list_same_day">
            @foreach (Matches match in MatchesListSameDay ?? new List<Matches>())
            {
                <NavLink style="cursor:pointer;" @onclick="@(()=>isLoading = true)" href="@("football/matchdetails/" + match.MatchID)">
                    <Match MatchItem="@match" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" IsMatchForSameDayList="@true" />
                </NavLink>
            }
        </div>
    </div>

    <div class="box" style="padding:0.3rem 0">
        <Match MatchItem="@SelectedMatch" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" ShowMatchType="@true" />
    </div>

    @if (SelectedMatch != null)
    {
        <div class="box">
            <MatchDetailsTabs TabOnClick="OnTabClick" Match="@(SelectedMatch)" />
        </div>
    }

    <div class="box box-scroll">
        <div style="position:absolute;top:0;bottom:0;width:100%;overflow:auto; margin: 0; padding: 0 5px;">
            <div class="@(selectedTab == "0" ? "active_tab" : "no_active_tab")">
                <SummaryView SummaryEventsOfMatch="@(fullMatchDetails?.Summary)" />
            </div>
            <div class="@(selectedTab == "1" ? "active_tab" : "no_active_tab")">
                <LineupsView PlayersOfMatch="@(fullMatchDetails?.MatchDetails?.PlayersOfMatch)" Match="@(fullMatchDetails?.MatchDetails?.Match)" />
            </div>
            <div class="@(selectedTab == "2" ? "active_tab" : "no_active_tab")">
                <CommentariesView Commentaries="@(fullMatchDetails?.Commentary)" />
            </div>
            <div class="@(selectedTab == "3" ? "active_tab" : "no_active_tab")">
                <StatisticView StatisticOfMatch="@(fullMatchDetails?.Statistics)" />
            </div>
            <div class="@(selectedTab == "4" ? "active_tab" : "no_active_tab")">
                <LiveStandingView Standing="@(standing)" Match="@(SelectedMatch)" />
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    [Parameter]
    public string matchid { get; set; }

    private Matches SelectedMatch = new Matches();
    private FullMatchDetailsModelView fullMatchDetails;
    private List<Matches> MatchesListSameDay = new List<Matches>();
    private Standing standing = new Standing();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedTab = "0";

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        if (matchid != null)
        {
            _ = LoadMatchDetails();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        _ = LoadMatchDetails();
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await LoadMatchDetails();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadMatchDetails();
    }

    private void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        MatchUpdate(matchDetails);
    }

    private async void MatchUpdate(MatchDetails matchDetails)
    {
        string matchIDForUpdate = matchDetails?.MatchDetailsID.ToString();
        if (matchid == matchIDForUpdate)
        {
            await LoadMatchDetails();
        }
        MatchesListSameDay = DystirWebClientService.GetMatchesListSameDay(SelectedMatch);
        await LoadLiveStandingAsync(SelectedMatch);
        Refresh();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTabClick(string tabIndex)
    {
        selectedTab = tabIndex;
    }

    public async Task LoadMatchDetails()
    {
        int parseMatchID = int.TryParse(matchid, out int m) ? int.Parse(matchid) : 0;
        SelectedMatch = DystirWebClientService.AllMatches?.FirstOrDefault(x => x.MatchID == parseMatchID);
        fullMatchDetails = await DystirWebClientService.LoadMatchDetailsAsync(parseMatchID);
        MatchesListSameDay = DystirWebClientService.GetMatchesListSameDay(SelectedMatch);
        await LoadLiveStandingAsync(SelectedMatch);
        isLoading = false;
        Refresh();
    }

    private async Task LoadLiveStandingAsync(Matches selectedMatch)
    {
        standing = LiveStandingService.GetStanding(selectedMatch);
        await Task.CompletedTask;
    }
}