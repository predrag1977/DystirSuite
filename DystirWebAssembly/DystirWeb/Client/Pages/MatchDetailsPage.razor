@page "/football/matchdetails/{matchid}"

@layout MainFootballLayout
@implements IDisposable

<div id="match-details_static_part">
    <div id="matches_same_day">
        @foreach (Matches match in MatchesListSameDay ?? new List<Matches>())
        {
            <NavLink style="cursor:pointer;" @onclick="@(()=>isLoading = true)" href="@("football/matchdetails/" + match.MatchID)">
                <Match MatchItem="@match" TimeZoneOffset="@timeZoneOffset" IsMatchForSameDayList="@true" />
            </NavLink>
        }
    </div>

    <div id="selected_match_details">
        <Match MatchItem="@SelectedMatch" TimeZoneOffset="@timeZoneOffset" ShowMatchType="@true" />
    </div>

    @if (SelectedMatch != null)
    {
        <div id="horizontal_menu_days">
            <MatchDetailsTabs TabOnClick="OnTabClick" Match="@(SelectedMatch)" />
        </div>
    }
</div>

<div id="match_details_container">

    <div class="@(selectedTab == "0" ? "active_tab" : "no_active_tab")">
        <SummaryView SummaryEventsOfMatch="@(fullMatchDetails?.Summary)" />
    </div>
    <div class="@(selectedTab == "1" ? "active_tab" : "no_active_tab")">
        <LineupsView PlayersOfMatch="@(fullMatchDetails?.MatchDetails?.PlayersOfMatch)" Match="@(fullMatchDetails?.MatchDetails?.Match)" />
    </div>
    <div class="@(selectedTab == "2" ? "active_tab" : "no_active_tab")">
        <CommentariesView Commentaries="@(fullMatchDetails?.Commentary)" />
    </div>
    @if (SelectedMatch?.StatusID <= 12)
    {
        <div class="@(selectedTab == "3" ? "active_tab" : "no_active_tab")">
            <StatisticView StatisticOfMatch="@(fullMatchDetails?.Statistics)" />
        </div>
    }
    @if (ShowLiveStandings(SelectedMatch))
    {
        <div class="@(selectedTab == "4" ? "active_tab" : "no_active_tab")">
            <LiveStandingView Standing="@(standing)" Match="@(SelectedMatch)" />
        </div>
    }
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    [Parameter]
    public string matchid { get; set; }

    private Matches SelectedMatch = new Matches();
    private FullMatchDetailsModelView fullMatchDetails;
    private List<Matches> MatchesListSameDay = new List<Matches>();
    private Standing standing = new Standing();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedTab = "0";

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        if (matchid != null)
        {
            _ = LoadMatchDetails();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        _ = LoadMatchDetails();
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await LoadMatchDetails();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadMatchDetails();
    }

    private void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        MatchUpdate(matchDetails);
    }

    private async void MatchUpdate(MatchDetails matchDetails)
    {
        string matchIDForUpdate = matchDetails?.MatchDetailsID.ToString();
        if (matchid == matchIDForUpdate)
        {
            await LoadMatchDetails();
        }
        else
        {
            MatchesListSameDay = DystirWebClientService.GetMatchesListSameDay(SelectedMatch);
            await LoadLiveStandingAsync(SelectedMatch);
        }
        Refresh();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTabClick(string tabIndex)
    {
        selectedTab = tabIndex;
    }

    public async Task LoadMatchDetails()
    {
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
        int parseMatchID = int.TryParse(matchid, out int m) ? int.Parse(matchid) : 0;
        SelectedMatch = DystirWebClientService.AllMatches?.FirstOrDefault(x => x.MatchID == parseMatchID);
        MatchesListSameDay = DystirWebClientService.GetMatchesListSameDay(SelectedMatch);
        Refresh();
        var loadMatchDetailsAsyncTask = DystirWebClientService.LoadMatchDetailsAsync(parseMatchID);
        var loadLiveStandingAsyncTask = LoadLiveStandingAsync(SelectedMatch);
        await Task.WhenAll(loadMatchDetailsAsyncTask, loadLiveStandingAsyncTask);
        fullMatchDetails = loadMatchDetailsAsyncTask.Result;
        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private async Task LoadLiveStandingAsync(Matches selectedMatch)
    {
        standing = LiveStandingService.GetStanding(selectedMatch);
        await Task.CompletedTask;
    }

    private bool ShowLiveStandings(Matches match)
    {
        var competititionNamesArray = new string[] { "Betri deildin", "1. deild", "Betri deildin kvinnur", "2. deild" };
        return competititionNamesArray.Any(x => x == match?.MatchTypeName);
    }
}
