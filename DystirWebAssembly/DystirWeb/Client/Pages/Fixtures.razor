@page "/football/fixtures"

@layout MainFootballLayout
@implements IDisposable


<div id="competitions_selection">
    <ChooseCompetitions CompetitionsList="@(CompetitionsList)"
                        SelectedCompetition="@(SelectedFixturesCompetition)"
                        CompetitionsOnClick="@(CompetitionsOnClick)" />
</div>
<div id="main_container">
    @if (FixturesMatchesListGroup?.Count > 0)
    {
        foreach (var matchgroup in FixturesMatchesListGroup)
        {
            <div class="match-group-competition-name">@(matchgroup.Key)</div>
            @foreach (var match in matchgroup)
            {
                <NavLink class="nav-link" href="@("/football/matchdetails/" + match.MatchID)">
                    <MatchView MatchItem="@match" TimeZoneOffset="@timeZoneOffset" />
                </NavLink>
            }
        }
    }
    else if (FixturesMatchesListGroup?.Count == 0)
    {
        <div class="no-matches">Eingin dystur</div>
    }
    <NewsView />
    <SponsorsView ShowOnSideBar="false" />
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    private string SelectedFixturesCompetition { get; set; }
    private List<string> CompetitionsList { get; set; }
    private List<IGrouping<string, Matches>> FixturesMatchesListGroup;
    private int timeZoneOffset = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        _ = LoadFixturesMatches();
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await LoadFixturesMatches();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadFixturesMatches();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await LoadFixturesMatches();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async void CompetitionsOnClick(string competition)
    {
        isLoading = true;
        SelectedFixturesCompetition = competition;
        await LoadFixturesMatches();
    }

    public async Task LoadFixturesMatches()
    {
        await Task.Run(() =>
        {
            var allFixturesMatchByCompetition = DystirWebClientService.AllMatches?.Where(x => x.StatusID < 12 || x.StatusID == 14)
            .OrderBy(x => x.MatchTypeID).OrderBy(x => GetOrder(x.MatchTypeID))
            .ThenBy(x => x.RoundID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();

            if (allFixturesMatchByCompetition == null) return;

            CompetitionsList = new List<string>();
            foreach (var matchGroup in allFixturesMatchByCompetition)
            {
                CompetitionsList.Add(matchGroup.Key);
            }

            if (string.IsNullOrWhiteSpace(SelectedFixturesCompetition))
            {
                SelectedFixturesCompetition = CompetitionsList?.FirstOrDefault() ?? "";
            }

            var fixturesMatchesList = allFixturesMatchByCompetition.FirstOrDefault(x => x.Key == SelectedFixturesCompetition)?.ToList() ?? new List<Matches>();
            FixturesMatchesListGroup = fixturesMatchesList.GroupBy(x => x.RoundName)?.ToList();
        });
        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private object GetOrder(int? matchTypeId)
    {
        switch (matchTypeId)
        {
            case 101:
                return 6;
            case 6:
                return 101;
            default:
                return matchTypeId;
        }
    }
}