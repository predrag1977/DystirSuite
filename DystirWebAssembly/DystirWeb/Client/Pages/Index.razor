@page "/"
@page "/football/matches/{daysRange}"

@layout MainFootballLayout
@implements IDisposable

<div id="days_selection">
    <ChooseDays DaysOnClick="@DaysOnClick" TimeZoneOffset="@timeZoneOffset" DaysRange="@daysRange" />
</div>
<div id="main_container">
    @if (SelectedMatchListGroup?.Count > 0)
    {
        foreach (var matchgroup in SelectedMatchListGroup)
        {
            <div class="match-group-competition-name">@(matchgroup.Key)</div>
            @foreach (var match in matchgroup)
            {
                <NavLink class="nav-link" href="@("/football/matchdetails/" + match.MatchID)">
                    <MatchView MatchItem="@match" TimeZoneOffset="@timeZoneOffset" />
                </NavLink>
            }
        }
    }
    else if (SelectedMatchListGroup?.Count == 0)
    {
        <div class="no-matches">Eingin dystur</div>
    }
    <NewsView />
    <SponsorsView ShowOnSideBar="false" />
</div>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    private int _daysFrom = 0;
    private int _daysAfter = 0;
    private List<IGrouping<string, Matches>> SelectedMatchListGroup;
    private int timeZoneOffset = 0;
    private bool isLoading = true;

    [Parameter]
    public string daysRange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        if (daysRange != null)
        {
            SetSelectedDaysRange(daysRange);
            _ = GetSelectedMatchListGroup();
            await ChangeUrl(daysRange);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        SetSelectedDaysRange(daysRange);
        _ = GetSelectedMatchListGroup();
        await ChangeUrl(daysRange);
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetSelectedMatchListGroup();
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async void DaysOnClick(string daysRange)
    {
        isLoading = true;
        SetSelectedDaysRange(daysRange);
        _ = GetSelectedMatchListGroup();
        await ChangeUrl(daysRange);
    }

    private void SetSelectedDaysRange(string daysRange)
    {
        DateTime dateToday = DateTime.UtcNow.AddMinutes(-timeZoneOffset);
        CultureInfo cultureInfo = new CultureInfo("fo-FO");
        int offset = cultureInfo.DateTimeFormat.FirstDayOfWeek - dateToday.DayOfWeek;
        switch (daysRange?.ToLower())
        {
            case "lastweek":
                _daysFrom = offset - 7;
                _daysAfter = 6;
                break;
            case "yesterday":
                _daysFrom = -1;
                _daysAfter = 0;
                break;
            case "today":
            default:
                _daysFrom = 0;
                _daysAfter = 0;
                break;
            case "tomorrow":
                _daysFrom = 1;
                _daysAfter = 0;
                break;
            case "nextweek":
                _daysFrom = offset;
                _daysAfter = 6;
                break;
        }
        this.daysRange = daysRange;
    }

    public async Task GetSelectedMatchListGroup()
    {
        await Task.Run(() =>
        {
            var fromDate = DateTime.Now.Date.AddDays(_daysFrom);
            var toDate = fromDate.AddDays(_daysAfter);
            SelectedMatchListGroup = DystirWebClientService.AllMatches?.OrderBy(x => GetOrder(x.MatchTypeID)).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .Where(x => x.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate
            && x.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate).GroupBy(x => x.MatchTypeName)?.ToList();
        });

        if (SelectedMatchListGroup == null) return;

        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private object GetOrder(int? matchTypeId)
    {
        switch (matchTypeId)
        {
            case 101:
                return 6;
            case 6:
                return 101;
            default:
                return matchTypeId;
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task ChangeUrl(string daysRange)
    {
        string url = string.IsNullOrWhiteSpace(daysRange) ? "" : "/football/matches/" + daysRange;
        await JSRuntime.InvokeVoidAsync("changeUrl", url);
    }
}
