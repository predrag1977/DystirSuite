@page "/{page}/matchdetails/{matchid}"

@layout PagesWebSiteShareLayout
@implements IDisposable

@if (page?.ToLower() == "dimma"
        || page?.ToLower() == "info"
        || page?.ToLower() == "portal"
        || page?.ToLower() == "roysni"
        || page?.ToLower() == "midlar")
{
    <div id="main_share">
        <div id="background_share">
            <div id="header_container_share">
                <PageWebSiteShareHeader Page="@(page?.ToLower())" />
            </div>
            
            <div id="container_share">
                <div id="match-details_static_part">
                    @if (ShowMatchList)
                    {
                    <div id="competitions_selection">
                        <ChooseCompetitions CompetitionsList="@(CompetitionsList)"
                                            SelectedCompetition="@(SelectedCompetition)"
                                            CompetitionsOnClick="@(CompetitionsOnClick)" />
                    </div>
                    <div id="matches_same_day_share">
                        @foreach (var matchesGroup in SelectedMatchListGroup)
                        {
                            if (SelectedCompetition == matchesGroup.Key)
                            {
                                var matches = matchesGroup.Select(x => x);
                                @foreach (Matches match in matches)
                                {
                                    <NavLink style="cursor:pointer;" @onclick="@(() => isLoading = SelectedMatch?.MatchID != match.MatchID)" href="@(page + "/matchdetails/" + match.MatchID)">
                                        <div class="match_item_same_day_share_details">
                                            <PagesWebSiteShareMatchForSameDayList MatchItem="@match" TimeZoneOffset="@timeZoneOffset" />
                                        </div>
                                    </NavLink>
                                }
                            }
                        }
                    </div>
                    }
                </div>
                <div id="match_details_container">
                    <div id="selected_match_details">
                        <PagesWebSiteShareMatch MatchItem="@SelectedMatch"
                                                TimeZoneOffset="@timeZoneOffset"
                                                ShowMatchType="@true"
                                                Page="@(page?.ToLower())" />
                    </div>

                    @if (SelectedMatch != null)
                    {
                        <div id="horizontal_menu_days">
                            <MatchDetailsTabs TabOnClick="OnTabClick" Match="@(SelectedMatch)" />
                        </div>
                    }
                    <div>
                        <div class="@(selectedTab == "0" ? "active_tab" : "no_active_tab")">
                            <SummaryView SummaryEventsOfMatch="@(fullMatchDetails?.Summary)" />
                        </div>
                        <div class="@(selectedTab == "1" ? "active_tab" : "no_active_tab")">
                            <LineupsView PlayersOfMatch="@(fullMatchDetails?.MatchDetails?.PlayersOfMatch)" Match="@(fullMatchDetails?.MatchDetails?.Match)" />
                        </div>
                        <div class="@(selectedTab == "2" ? "active_tab" : "no_active_tab")">
                            <CommentariesView Commentaries="@(fullMatchDetails?.Commentary)" />
                        </div>
                        @if (SelectedMatch?.StatusID <= 12)
                        {
                            <div class="@(selectedTab == "3" ? "active_tab" : "no_active_tab")">
                                <StatisticView StatisticOfMatch="@(fullMatchDetails?.Statistics)" />
                            </div>
                        }
                        @if (ShowLiveStandings(SelectedMatch))
                        {
                            <div class="@(selectedTab == "4" ? "active_tab" : "no_active_tab")">
                                <LiveStandingView Standing="@(standing)" Match="@(SelectedMatch)" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-spinner-parent">
            <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
        </div>
    }
}

@code {

    [Parameter]
    public string matchid { get; set; }

    [Parameter]
    public string page { get; set; }

    private string SelectedCompetition { get; set; }
    private List<string> CompetitionsList { get; set; }
    private List<IGrouping<string, Matches>> SelectedMatchListGroup = new List<IGrouping<string, Matches>>();
    private Matches SelectedMatch;
    private FullMatchDetailsModelView fullMatchDetails;
    private Standing standing = new Standing();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedTab = "0";
    private bool ShowMatchList = false;


    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        if (matchid != null)
        {
            _ = LoadMatchDetails();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _ = JSRuntime.InvokeVoidAsync("getMatchItemWidth", GetNumberOfMatches());
    }

    protected override async Task OnParametersSetAsync()
    {
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        _ = LoadMatchDetails();
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await LoadMatchDetails();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadMatchDetails();
    }

    private void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        MatchUpdate(matchDetails);
    }

    private async void MatchUpdate(MatchDetails matchDetails)
    {
        string matchIDForUpdate = matchDetails?.MatchDetailsID.ToString();
        if (matchid == matchIDForUpdate)
        {
            await LoadMatchDetails();
        }
        else
        {
            var getSelectedMatchListGroupTask = GetSelectedMatchListGroup();
            var loadLiveStandingAsyncTask = LoadLiveStandingAsync(SelectedMatch);
            await Task.WhenAll(getSelectedMatchListGroupTask, loadLiveStandingAsyncTask);
        }
        Refresh();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTabClick(string tabIndex)
    {
        selectedTab = tabIndex;
    }

    private void CompetitionsOnClick(string competition)
    {
        SelectedCompetition = competition;
        Refresh();
    }

    public async Task LoadMatchDetails()
    {
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
        int parseMatchID = int.TryParse(matchid, out int m) ? int.Parse(matchid) : 0;
        SelectedMatch = DystirWebClientService.AllMatches?.FirstOrDefault(x => x.MatchID == parseMatchID);
        var loadMatchDetailsAsyncTask = DystirWebClientService.LoadMatchDetailsAsync(parseMatchID);
        var getSelectedMatchListGroupTask = GetSelectedMatchListGroup();
        var loadLiveStandingAsyncTask = LoadLiveStandingAsync(SelectedMatch);
        await Task.WhenAll(loadMatchDetailsAsyncTask, getSelectedMatchListGroupTask, loadLiveStandingAsyncTask);
        fullMatchDetails = loadMatchDetailsAsyncTask.Result;
        isLoading = false;
        Refresh();
        _ = JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    public async Task GetSelectedMatchListGroup()
    {
        var fromDate = DateTime.UtcNow.AddMinutes(-timeZoneOffset).Date.AddDays(0);
        var toDate = fromDate.AddDays(0);

        var matchesList = DystirWebClientService.AllMatches?
            .Where(x => x.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate
            && x.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate)
            .OrderBy(x => GetOrder(x.MatchTypeID))
            .ThenBy(x => x.Time)
            .ThenBy(x => x.MatchID);
        if (page?.ToLower() == "portal")
        {
            SelectedMatchListGroup = matchesList.Where(x => x.MatchTypeID != 5 && x.MatchTypeID != 6).GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();
        }
        else
        {
            SelectedMatchListGroup = matchesList.GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();
        }

        ShowMatchList = SelectedMatchListGroup?.Count() > 0;
        if(ShowMatchList)
        {
            if (SelectedMatchListGroup?.Count() == 1 && SelectedMatchListGroup?[0].Select(x => x).Count() == 1) 
            {
                ShowMatchList = false;
            }
        }

        CompetitionsList = new List<string>();
        foreach (var matchGroup in SelectedMatchListGroup ?? new List<IGrouping<string, Matches>>())
        {
            CompetitionsList.Add(matchGroup.Key);
        }
        SelectedCompetition = string.IsNullOrWhiteSpace(SelectedMatch?.MatchTypeName) ? CompetitionsList?.FirstOrDefault() ?? "" : SelectedMatch?.MatchTypeName;

        await JSRuntime.InvokeVoidAsync("getMatchItemWidth", GetNumberOfMatches());
        await Task.CompletedTask;
    }

    private async Task LoadLiveStandingAsync(Matches selectedMatch)
    {
        standing = LiveStandingService.GetStanding(selectedMatch?.MatchTypeName);
        await Task.CompletedTask;
    }

    private bool ShowLiveStandings(Matches match)
    {
        match = new Matches();
        var competititionNamesArray = DystirWebClientService?.AllCompetitions?
            .Where(x => x.CompetitionID > 0)?
            .Select(x => x.MatchTypeName);
        return competititionNamesArray?.Any(x => x == SelectedMatch?.MatchTypeName) == true;
    }

    private bool IsTodayMatch() {
        var fromDate = DateTime.UtcNow.AddMinutes(-timeZoneOffset).Date.AddDays(0);
        var toDate = fromDate.AddDays(0);
        return SelectedMatch.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate && SelectedMatch.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate;
    }

    //private string GetTimestamp(DateTime value)
    //{
    //    return value.ToString("yyyyMMddHHmm");
    //}

    private string GetNumberOfMatches() {
        int numberOfMatches = SelectedMatchListGroup?.FirstOrDefault(x => x.Key == SelectedCompetition)?.Select(x => x)?.Count() ?? 0;
        return numberOfMatches.ToString();
    }

    private object GetOrder(int? matchTypeId)
    {
        switch (matchTypeId)
        {
            case 101:
                return 6;
            case 6:
                return 101;
            default:
                return matchTypeId;
        }
    }
}