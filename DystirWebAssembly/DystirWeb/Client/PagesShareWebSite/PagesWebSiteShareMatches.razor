@page "/{page}/matches"

@layout PagesWebSiteShareLayout
@implements IDisposable

@if (page?.ToLower() == "dimma" || page?.ToLower() == "info")
{
    <div class="matches_and_competition_selection">
        @if (MatchesCompetitionList?.Count > 0)
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(MatchesCompetitionList)"
                                    SelectedCompetition="@(SelectedMatchesCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)" />
            </div>
            <div id="matches_same_day_share">
                @foreach (var matchesGroup in MatchesListGroup ?? new List<IGrouping<string, Matches>>())
                {
                    if (SelectedMatchesCompetition == matchesGroup.Key)
                    {
                        var matches = matchesGroup.Select(x => x);
                        @foreach (Matches match in matches)
                        {
                            <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                <PagesWebSiteShareMatch MatchItem="@match"
                                                        TimeZoneOffset="@timeZoneOffset"
                                                        IsMatchForSameDayList="@true"
                                                        NumberOfMatches="@MatchesNumber"
                                                        Page="@(page?.ToLower())"/>
                            </NavLink>
                        }
                    }
                }
            </div>
        }
        else if (MatchesCompetitionList?.Count == 0)
        {
            <div class="no-matches">Eingin dystur í dag</div>
        }
        @if (isLoading)
        {
            <div class="loading-spinner-parent">
                <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
            </div>
        }
    </div>
}
else if (page?.ToLower() == "portal")
{
    <div class="matches_and_competition_selection">
        
        @if (SelectedTab == "DYSTIR")
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(MatchesCompetitionList)"
                                    SelectedCompetition="@(SelectedMatchesCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)" />
            </div>

            <div id="main_container_vertical_list" style="border-inline: 1px solid rgba(17,24,39,.05)">
                <div id="matches_same_day_share">
                    @foreach (var matchesGroup in MatchesListGroup ?? new List<IGrouping<string, Matches>>())
                    {
                        if (SelectedMatchesCompetition == matchesGroup.Key)
                        {
                            var matches = matchesGroup.Select(x => x);
                            @foreach (Matches match in matches)
                            {
                                <div>
                                    <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                        <PagesWebSiteShareMatch MatchItem="@match"
                                                                TimeZoneOffset="@timeZoneOffset"
                                                                IsMatchForSameDayList="@true"
                                                                NumberOfMatches="@MatchesNumber"
                                                                Page="@(page?.ToLower())">
                                        </PagesWebSiteShareMatch>
                                    </NavLink>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        }
        else if (SelectedTab == "ÚRSLIT")
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(ResultsCompetitionList)"
                                    SelectedCompetition="@(SelectedResultsCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)"/>
            </div>

            <div id="main_container_vertical_list" style="border-inline: 1px solid rgba(17,24,39,.05)">
                <div id="matches_same_day_share">
                    @foreach (var matchesGroup in ResultsListGroup ?? new List<IGrouping<string, Matches>>())
                    {
                        <div class="match-group-competition-name">@(matchesGroup.Key)</div>
                        @foreach (var match in matchesGroup)
                        {
                            <div>
                                <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                    <PagesWebSiteShareMatch MatchItem="@match"
                                                            TimeZoneOffset="@timeZoneOffset"
                                                            IsMatchForSameDayList="@true"
                                                            Page="@(page?.ToLower())">
                                    </PagesWebSiteShareMatch>
                                </NavLink>
                            </div>
                        }
                    }
                </div>
            </div>
        }
        else if (SelectedTab == "KOMANDI")
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(FixturesCompetitionList)"
                                    SelectedCompetition="@(SelectedFixturesCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)" />
            </div>

            <div id="main_container_vertical_list" style="border-inline: 1px solid rgba(17,24,39,.05)">
                <div id="matches_same_day_share">
                    @foreach (var matchesGroup in FixturesListGroup ?? new List<IGrouping<string, Matches>>())
                    {
                        <div class="match-group-competition-name">@(matchesGroup.Key)</div>
                        @foreach (var match in matchesGroup)
                        {
                            <div>
                                <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                    <PagesWebSiteShareMatch MatchItem="@match"
                                                            TimeZoneOffset="@timeZoneOffset"
                                                            IsMatchForSameDayList="@true"
                                                            Page="@(page?.ToLower())">
                                    </PagesWebSiteShareMatch>
                                </NavLink>
                            </div>
                        }
                    }
                </div>
            </div>
        }
        else if (SelectedTab == "STØÐAN")
        {
            if (StandingsCompetitionsList?.Count > 0)
            {
                <div id="competitions_selection">
                    <ChooseCompetitions CompetitionsList="@(StandingsCompetitionsList)"
                                        SelectedCompetition="@(SelectedStandingsCompetition)"
                                        CompetitionsOnClick="@(CompetitionsOnClick)" />
                </div>
                <div id="main_container_vertical_list" style="border-inline: 1px solid rgba(17,24,39,.05)">
                    <LiveStandingView Standing="@(LiveStanding)" />
                </div>
            }
        }

        <div id="competitions_selection">
            <ChoosePages TabList="@(TabList)"
                         SelectedTab="@(SelectedTab)"
                         TabOnClick="@(TabOnClick)" />
        </div>

        @if (isLoading)
        {
            <div class="loading-spinner-parent">
                <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
            </div>
        }
    </div>
}  

@code {
        [Parameter]
        public string page { get; set; }

    private string SelectedMatchesCompetition { get; set; }
    private List<string> MatchesCompetitionList { get; set; }
    private List<IGrouping<string, Matches>> MatchesListGroup;
    private int MatchesNumber = 0;

    private string SelectedResultsCompetition { get; set; }
    private List<string> ResultsCompetitionList { get; set; }
    private List<IGrouping<string, Matches>> ResultsListGroup;

    private string SelectedFixturesCompetition { get; set; }
    private List<string> FixturesCompetitionList { get; set; }
    private List<IGrouping<string, Matches>> FixturesListGroup;

    private string SelectedStandingsCompetition { get; set; }
    private List<string> StandingsCompetitionsList { get; set; }
    private Standing LiveStanding;

    private string SelectedTab { get; set; }
    private List<string> TabList { get; set; }

    private bool isTabClicked = false;
    private int timeZoneOffset = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        await JSRuntime.InvokeAsync<object>("includeCssShareMatches", page);
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        await GetSelectedMatchListGroup();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(isTabClicked)
        {
            await JSRuntime.InvokeVoidAsync("onPageResize", "");
            isTabClicked = false;
        }
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetSelectedMatchListGroup();
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void CompetitionsOnClick(string competition)
    {
        if (page == "portal")
        {
            if (SelectedTab == "DYSTIR")
            {
                SelectedMatchesCompetition = competition;
                MatchesNumber = MatchesListGroup.FirstOrDefault(x => x.Key == SelectedMatchesCompetition)?.Select(x => x)?.Count() ?? 0;
                SetMatches();
            }
            else if (SelectedTab == "ÚRSLIT")
            {
                SelectedResultsCompetition = competition;
                SetResults();
            }
            else if (SelectedTab == "KOMANDI")
            {
                SelectedFixturesCompetition = competition;
                SetFixtures();
            }
            else if (SelectedTab == "STØÐAN")
            {
                SelectedStandingsCompetition = competition;
                LiveStanding = LiveStandingService.GetStanding(SelectedStandingsCompetition);
            }
        }
        else
        {
            SelectedMatchesCompetition = competition;
            MatchesNumber = MatchesListGroup.FirstOrDefault(x => x.Key == SelectedMatchesCompetition)?.Select(x => x)?.Count() ?? 0;
        }
        Refresh();
    }

    private void TabOnClick(string page)
    {
        isTabClicked = true;
        SelectedTab = page;
        _ = GetSelectedMatchListGroup();
    }

    public async Task GetSelectedMatchListGroup()
    {
        SetMatches();
        SetResults();
        SetFixtures();
        SetStandings();
        SetTabMenu();

        isLoading = false;
        Refresh();
        await JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private void SetMatches()
    {
        var toNumber = page?.ToLower() == "portal" ? 7 : 0;
        var fromDate = DateTime.UtcNow.AddMinutes(-timeZoneOffset).Date.AddDays(0);
        var toDate = fromDate.AddDays(toNumber);
        MatchesListGroup = DystirWebClientService.AllMatches?
            .OrderBy(x => x.MatchTypeID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .Where(x => x.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate && x.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate)
            .GroupBy(x => x.MatchTypeName)?.ToList();

        if (MatchesListGroup == null) return;

        MatchesCompetitionList = new List<string>();
        foreach (var matchGroup in MatchesListGroup ?? new List<IGrouping<string, Matches>>())
        {
            MatchesCompetitionList.Add(matchGroup.Key);
        }

        SelectedMatchesCompetition = string.IsNullOrWhiteSpace(SelectedMatchesCompetition) ? MatchesCompetitionList?.FirstOrDefault() ?? "" : SelectedMatchesCompetition;
        MatchesNumber = MatchesListGroup?.FirstOrDefault(x => x.Key == SelectedMatchesCompetition)?.Select(x => x)?.Count() ?? 0;
    }

    private void SetResults()
    {
        var allResultMatchByCompetition = DystirWebClientService.AllMatches?
            .Where(x => (x.StatusID == 12 || x.StatusID == 13)
            && x.MatchTypeID != 3 && x.MatchTypeID != 4 && x.MatchTypeID != 100 && x.MatchTypeID != 103)
            .OrderBy(x => GetOrder(x.MatchTypeID))
            .ThenByDescending(x => x.Time).ThenByDescending(x => x.RoundID).ThenBy(x => x.MatchID)
            .GroupBy(x => x.MatchTypeName)?.ToList();

        if (allResultMatchByCompetition == null) return;

        ResultsCompetitionList = new List<string>();
        foreach (var matchGroup in allResultMatchByCompetition)
        {
            ResultsCompetitionList.Add(matchGroup.Key);
        }

        if (string.IsNullOrWhiteSpace(SelectedResultsCompetition))
        {
            SelectedResultsCompetition = ResultsCompetitionList?.FirstOrDefault() ?? "";
        }

        var resultMatchesList = allResultMatchByCompetition.FirstOrDefault(x => x.Key == SelectedResultsCompetition)?.ToList() ?? new List<Matches>();
        ResultsListGroup = resultMatchesList.GroupBy(x => x.RoundName)?.ToList();
    }

    private void SetFixtures()
    {
        var allFixturesMatchByCompetition = DystirWebClientService.AllMatches?.Where(x => x.StatusID < 12 || x.StatusID == 14)
            .OrderBy(x => x.MatchTypeID).OrderBy(x => GetOrder(x.MatchTypeID))
            .ThenBy(x => x.RoundID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();

        if (allFixturesMatchByCompetition == null) return;

        FixturesCompetitionList = new List<string>();
        foreach (var matchGroup in allFixturesMatchByCompetition)
        {
            FixturesCompetitionList.Add(matchGroup.Key);
        }

        if (string.IsNullOrWhiteSpace(SelectedFixturesCompetition))
        {
            SelectedFixturesCompetition = FixturesCompetitionList?.FirstOrDefault() ?? "";
        }

        var fixturesMatchesList = allFixturesMatchByCompetition.FirstOrDefault(x => x.Key == SelectedFixturesCompetition)?.ToList() ?? new List<Matches>();
        FixturesListGroup = fixturesMatchesList.GroupBy(x => x.RoundName)?.ToList();
    }

    private void SetStandings()
    {
        StandingsCompetitionsList = DystirWebClientService.AllCompetitions?
            .Where(x => x.CompetitionID > 0)
            .OrderBy(x => x.OrderID)?
            .Select(x => x.MatchTypeName)?
            .ToList() ?? new List<string>();

        SelectedStandingsCompetition = string.IsNullOrWhiteSpace(SelectedStandingsCompetition) ? StandingsCompetitionsList?.FirstOrDefault() ?? "" : SelectedStandingsCompetition;
        LiveStanding = LiveStandingService.GetStanding(SelectedStandingsCompetition);
    }

    private void SetTabMenu()
    {
        TabList = new List<string>();
        if (MatchesCompetitionList?.Count > 0)
        {
            TabList.Add("DYSTIR");
        }
        if (ResultsCompetitionList?.Count > 0)
        {
            TabList.Add("ÚRSLIT");
        }
        if (FixturesCompetitionList?.Count > 0)
        {
            TabList.Add("KOMANDI");
        }
        if(StandingsCompetitionsList?.Count > 0)
        {
            TabList.Add("STØÐAN");
        }
        SelectedTab = string.IsNullOrWhiteSpace(SelectedTab) ? TabList?.FirstOrDefault() ?? "" : SelectedTab;
    }

    private object GetOrder(int? matchTypeId)
    {
        switch (matchTypeId)
        {
            case 101:
                return 6;
            case 6:
                return 101;
            default:
                return matchTypeId;
        }
    }
}
