@page "/{page}/matches"

@layout PagesWebSiteShareLayout
@implements IDisposable

<link href="css/@(page).css?v=104" rel="stylesheet" />

@if (page.Equals("dimma") || page.Equals("info"))
{
    @if (SelectedMatchListGroup?.Count() > 0)
    {
        <div id="competitions_selection">
            <ChooseCompetitions CompetitionsList="@(CompetitionsList)"
                                SelectedCompetition="@(SelectedCompetition)"
                                CompetitionsOnClick="@(CompetitionsOnClick)" />
        </div>
        <div id="matches_same_day_share">
            @foreach (var matchesGroup in SelectedMatchListGroup)
            {
                if (SelectedCompetition == matchesGroup.Key)
                {
                    var matches = matchesGroup.Select(x => x);
                    @foreach (Matches match in matches)
                    {
                        <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                            <PagesWebSiteShareMatch MatchItem="@match"
                                                    TimeZoneOffset="@timeZoneOffset"
                                                    IsMatchForSameDayList="@true"
                                                    NumberOfMatches="@numberOfMatches"/>
                        </NavLink>
                    }
                }
            }
        </div>
    }

    @if (isLoading)
    {
        <div class="loading-spinner-parent">
            <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
        </div>
    }
}

@code {
    [Parameter]
    public string page { get; set; }

    private string SelectedCompetition { get; set; }
    private List<string> CompetitionsList { get; set; }
    private List<IGrouping<string, Matches>> SelectedMatchListGroup = new List<IGrouping<string, Matches>>();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private int numberOfMatches = 0;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        _ = GetSelectedMatchListGroup();
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetSelectedMatchListGroup();
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void CompetitionsOnClick(string competition)
    {
        SelectedCompetition = competition;
        numberOfMatches = SelectedMatchListGroup.FirstOrDefault(x => x.Key == SelectedCompetition).Select(x => x)?.Count() ?? 0;
        Refresh();
    }

    public async Task GetSelectedMatchListGroup()
    {
        var fromDate = DateTime.UtcNow.AddMinutes(-timeZoneOffset).Date.AddDays(-5);
        var toDate = fromDate.AddDays(10);
        SelectedMatchListGroup = DystirWebClientService.AllMatches?
            .OrderBy(x => x.MatchTypeID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .Where(x => x.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate && x.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate)
            .GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();

        CompetitionsList = new List<string>();
        foreach (var matchGroup in SelectedMatchListGroup)
        {
            CompetitionsList.Add(matchGroup.Key);
        }
        SelectedCompetition = string.IsNullOrWhiteSpace(SelectedCompetition) ? CompetitionsList?.FirstOrDefault() ?? "" : SelectedCompetition;

        numberOfMatches = SelectedMatchListGroup.FirstOrDefault(x => x.Key == SelectedCompetition).Select(x => x)?.Count() ?? 0;
        isLoading = false;
        Refresh();
        await JSRuntime.InvokeVoidAsync("onPageResize", "");
    }
}
