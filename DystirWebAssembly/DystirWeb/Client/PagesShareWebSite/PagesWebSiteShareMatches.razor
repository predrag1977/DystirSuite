@page "/{page}/matches"

@layout PagesWebSiteShareLayout
@implements IDisposable

<link href="css/@(page)_style.css?v=201" rel="stylesheet" />

@if (page == "dimma" || page == "info")
{
    <div class="matches_and_competition_selection">
        @if (CompetitionsList?.Count > 0)
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(CompetitionsList)"
                                    SelectedCompetition="@(SelectedCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)" />
            </div>
            <div id="matches_same_day_share">
                @foreach (var matchesGroup in SelectedMatchListGroup ?? new List<IGrouping<string, Matches>>())
                    {
                        if (SelectedCompetition == matchesGroup.Key)
                        {
                            var matches = matchesGroup.Select(x => x);
                        @foreach (Matches match in matches)
                            {
                            <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                <PagesWebSiteShareMatch MatchItem="@match"
                                                        TimeZoneOffset="@timeZoneOffset"
                                                        IsMatchForSameDayList="@true"
                                                        NumberOfMatches="@numberOfMatches"
                                                        Page="@(page)"/>
                            </NavLink>
                            }
                        }
                    }
            </div>
        }
        else if (CompetitionsList?.Count == 0)
        {
            <div class="no-matches">Eingin dystur í dag</div>
        }
        @if (isLoading)
        {
            <div class="loading-spinner-parent">
                <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
            </div>
        }
    </div>
}
else if (page == "portal")
{
    <div class="matches_and_competition_selection">
   
        @if (SelectedTab == "DYSTIR Í DAG")
        {
            <div id="competitions_selection">
                <ChooseCompetitions CompetitionsList="@(CompetitionsList)"
                                    SelectedCompetition="@(SelectedCompetition)"
                                    CompetitionsOnClick="@(CompetitionsOnClick)" />
            </div>

            <div id="main_container_vertical_list">
                <div id="matches_same_day_share">
                    @foreach (var matchesGroup in SelectedMatchListGroup ?? new List<IGrouping<string, Matches>>())
                    {
                        if (SelectedCompetition == matchesGroup.Key)
                        {
                            var matches = matchesGroup.Select(x => x);
                            @foreach (Matches match in matches)
                            {
                                <div>
                                    <NavLink style="cursor:pointer;" target="_new" href="@(page + "/matchdetails/" + match.MatchID)">
                                        <PagesWebSiteShareMatch MatchItem="@match"
                                                                TimeZoneOffset="@timeZoneOffset"
                                                                IsMatchForSameDayList="@true"
                                                                NumberOfMatches="@numberOfMatches"
                                                                Page="@(page)">
                                        </PagesWebSiteShareMatch>
                                    </NavLink>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        }
        else if (SelectedTab == "STØÐAN")
        {
            if (StandingsCompetitionsList?.Count > 0)
            {
                <div id="competitions_selection">
                    <ChooseCompetitions CompetitionsList="@(StandingsCompetitionsList)"
                                        SelectedCompetition="@(SelectedStandingsCompetition)"
                                        CompetitionsOnClick="@(CompetitionsOnClick)" />
                </div>
                <div id="main_container_vertical_list">
                    <LiveStandingView Standing="@(standing)" />
                </div>
            }
            else
            {
                <div class="no-matches">Eingin dystur í dag</div>
            }
        }

        <div id="competitions_selection">
            <ChoosePages TabList="@(TabList)"
                         SelectedTab="@(SelectedTab)"
                         TabOnClick="@(TabOnClick)" />
        </div>

        @if (isLoading)
        {
            <div class="loading-spinner-parent">
                <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
            </div>
        }
    </div>
}  

@code {
    [Parameter]
    public string page { get; set; }

    private string SelectedCompetition { get; set; }
    private List<string> CompetitionsList { get; set; }
    private string SelectedStandingsCompetition { get; set; }
    private List<string> StandingsCompetitionsList { get; set; }
    private string SelectedTab { get; set; }
    private List<string> TabList { get; set; }
    private List<IGrouping<string, Matches>> SelectedMatchListGroup;
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private int numberOfMatches = 0;
    private Standing standing;
    private bool isTabClicked = false;

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        timeZoneOffset = int.Parse(await JSRuntime.InvokeAsync<String>("getTimeZoneOffset"));
        await GetSelectedMatchListGroup();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(isTabClicked)
        {
            await JSRuntime.InvokeVoidAsync("onPageResize", "");
            isTabClicked = false;
        }
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetSelectedMatchListGroup();
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void CompetitionsOnClick(string competition)
    {
        if (page == "portal" && SelectedTab == "STØÐAN")
        {
            SelectedStandingsCompetition = competition;
        }
        else
        {
            SelectedCompetition = competition;
        }

        numberOfMatches = SelectedMatchListGroup.FirstOrDefault(x => x.Key == SelectedCompetition)?.Select(x => x)?.Count() ?? 0;
        standing = LiveStandingService.GetStanding(SelectedStandingsCompetition);
        Refresh();
    }

    private void TabOnClick(string page)
    {
        isTabClicked = true;
        SelectedTab = page;
        _ = GetSelectedMatchListGroup();
    }

    public async Task GetSelectedMatchListGroup()
    {
        var fromDate = DateTime.UtcNow.AddMinutes(-timeZoneOffset).Date.AddDays(0);
        var toDate = fromDate.AddDays(0);
        SelectedMatchListGroup = DystirWebClientService.AllMatches?
            .OrderBy(x => x.MatchTypeID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .Where(x => x.Time.Value.AddMinutes(-timeZoneOffset).Date >= fromDate && x.Time.Value.AddMinutes(-timeZoneOffset).Date <= toDate)
            .GroupBy(x => x.MatchTypeName)?.ToList();

        if (SelectedMatchListGroup == null) return;

        CompetitionsList = new List<string>();
        foreach (var matchGroup in SelectedMatchListGroup ?? new List<IGrouping<string, Matches>>())
        {
            CompetitionsList.Add(matchGroup.Key);
        }

        StandingsCompetitionsList = DystirWebClientService.AllCompetitions
            .Where(x => x.CompetitionID > 0)
            .OrderBy(x => x.OrderID)?
            .Select(x => x.MatchTypeName)?
            .ToList() ?? new List<string>();

        SetTabMenu();
        SelectedCompetition = string.IsNullOrWhiteSpace(SelectedCompetition) ? CompetitionsList?.FirstOrDefault() ?? "" : SelectedCompetition;
        SelectedStandingsCompetition = string.IsNullOrWhiteSpace(SelectedStandingsCompetition) ? StandingsCompetitionsList?.FirstOrDefault() ?? "" : SelectedStandingsCompetition;

        numberOfMatches = SelectedMatchListGroup?.FirstOrDefault(x => x.Key == SelectedCompetition)?.Select(x => x)?.Count() ?? 0;
        standing = LiveStandingService.GetStanding(SelectedStandingsCompetition);
        isLoading = false;
        Refresh();
        await JSRuntime.InvokeVoidAsync("onPageResize", "");
    }

    private void SetTabMenu()
    {
        TabList = new List<string>();
        if (CompetitionsList.Count != 0)
        {
            TabList.Add("DYSTIR Í DAG");
        }
        TabList.Add("STØÐAN");
        SelectedTab = string.IsNullOrWhiteSpace(SelectedTab) ? TabList?.FirstOrDefault() ?? "" : SelectedTab;
    }
}
