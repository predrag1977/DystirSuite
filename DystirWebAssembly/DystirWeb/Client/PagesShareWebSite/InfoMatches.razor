@page "/infomatches"

@using DystirWeb.Shared
@using DystirWeb.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject DystirWebClientService DystirWebClientService
@inject TimeService TimeService
@inject HubConnection HubConnection
@layout MainShareWebSiteLayout
@implements IDisposable

<table class="table" style="width: 100%; height: 100%;">
    <tr>
        <td style="position:relative;width:100%;height:auto;padding:0;vertical-align:middle;">
            <div id="header-match-list box" style="overflow:hidden; margin:3px 0">
                @if (SelectedMatchListGroup?.Count > 0)
                {
                    <table class="table">
                        <tr>
                            @foreach (var matchesGroup in SelectedMatchListGroup)
                            {
                                var matches = matchesGroup.Select(x => x);
                                <td style="padding-left:0px;">
                                    <div class="competition-item tab @(selectedCompetitionName == matchesGroup.Key ? "selected_tab" : "")" @onclick="(() => OnCompetitionClick(matchesGroup.Key))">@(matchesGroup.Key?.ToUpper())</div>
                                </td>
                            }
                        </tr>
                    </table>
                    <table class="table" style="border-collapse: separate; border-spacing: 4px 0;">
                        <tr>
                            @foreach (var matchesGroup in SelectedMatchListGroup)
                            {
                                if (selectedCompetitionName == matchesGroup.Key)
                                {
                                    var matches = matchesGroup.Select(x => x);
                                    @foreach (Matches match in matches)
                                    {
                                        <td>
                                            <NavLink class="nav-link" style="cursor: pointer;" target="_new" href="@("infomatchdetails/" + match.MatchID)">
                                                <MatchShare MatchItem="@match" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" />
                                            </NavLink>
                                        </td>
                                    }
                                }
                            }
                        </tr>
                    </table>
                }
                else if (SelectedMatchListGroup?.Count == 0)
                {
                    <div style="width:100%;text-align:center;padding:35px;background-color:white">Eingin dystur í dag</div>
                }
            </div>
        </td>
    </tr>
</table>

@if (isLoading)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {
    private List<IGrouping<string, Matches>> SelectedMatchListGroup = new List<IGrouping<string, Matches>>();
    private int timeZoneOffset = TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow).Hours;
    private bool isLoading = true;
    private string selectedCompetitionName = "";

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnFullDataLoaded += DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails += DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed += TimerElapsed;
        _ = GetSelectedMatchListGroup();
        await Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnFullDataLoaded -= DystirWebClientService_FullDataLoaded;
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnRefreshMatchDetails -= DystirWebClientService_OnRefreshMatchDetails;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void DystirWebClientService_FullDataLoaded()
    {
        await GetSelectedMatchListGroup();
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private async void DystirWebClientService_OnRefreshMatchDetails(MatchDetails matchDetails)
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            Refresh();
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnCompetitionClick(string competitionName)
    {
        selectedCompetitionName = competitionName;
        Refresh();
    }

    public async Task GetSelectedMatchListGroup()
    {
        var fromDate = DateTime.UtcNow.AddHours(timeZoneOffset).Date.AddDays(0);
        var toDate = fromDate.AddDays(0);
        SelectedMatchListGroup = DystirWebClientService.AllMatches?
        .Where(x => x.Time.Value.ToLocalTime().Date >= fromDate && x.Time.Value.ToLocalTime().Date <= toDate)
        .OrderBy(x => x.MatchTypeID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
        .GroupBy(x => x.MatchTypeName)?.ToList();

        if (SelectedMatchListGroup == null) return;

        if (string.IsNullOrWhiteSpace(selectedCompetitionName))
        {
            selectedCompetitionName = SelectedMatchListGroup?.FirstOrDefault()?.Key ?? "";
        }
        isLoading = false;
        Refresh();
        await Task.CompletedTask;
    }
}
