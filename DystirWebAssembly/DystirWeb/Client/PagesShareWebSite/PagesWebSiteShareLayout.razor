@using DystirWeb.Services
@inject DystirWebClientService DystirWebClientService
@inherits LayoutComponentBase
@implements IDisposable

<div class="container-layout-share">
    @Body
</div>

@if (!IsDystirHubConnected)
{
    <div class="loading-spinner-parent">
        <i class="fas fa-spin fa-spinner fa-2x" style="color: darkgrey"></i>
    </div>
}

@code {

    public bool IsDystirHubConnected = true;
    public string Page { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        object page = null;
        if ((this.Body.Target as RouteView)?.RouteData.RouteValues?.TryGetValue("page", out page) == true)
        {
            Page = page?.ToString();
        }

        _ = JSRuntime.InvokeVoidAsync("setTitle", String.Format("{0} - Dystir", System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Page.ToLower())));

        string favicon = "favicon.ico";
        if (Page.Equals("dimma"))
        {
            favicon = "https://www.dimma.fo/assets/favicon.png";
        }
        else if (Page.Equals("info"))
        {
            favicon = "https://www.in.fo/favicon.ico";
        }

        _ = JSRuntime.InvokeVoidAsync("setFavicon", favicon);
    }

    protected override async Task OnInitializedAsync()
    {
        DystirWebClientService.OnConnected += HubConnection_OnConnected;
        DystirWebClientService.OnDisconnected += HubConnection_OnDisconnected;
        _ = DystirWebClientService.StartUpAsync();
        await Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        DystirWebClientService.OnConnected -= HubConnection_OnConnected;
        DystirWebClientService.OnDisconnected -= HubConnection_OnDisconnected;
    }

    private async void HubConnection_OnConnected()
    {
        IsDystirHubConnected = true;
        Refresh();
        await Task.CompletedTask;
    }

    private async void HubConnection_OnDisconnected()
    {
        IsDystirHubConnected = false;
        Refresh();
        await Task.CompletedTask;
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }
}






