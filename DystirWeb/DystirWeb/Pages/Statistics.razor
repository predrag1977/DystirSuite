@page "/football/statistics"

@using DystirWeb.Models
@using DystirWeb.ModelViews
@using DystirWeb.Services
@using System.Collections.ObjectModel
@inject DystirService DystirService
@layout MainFootballLayout
@implements IDisposable

<div class="container-fluid d-flex h-100 flex-column p-0">
    <div style="position:relative;width:100%;padding:0;background-color:dimgray">
        <ChooseCompetitions CompetitionsList="@(FullStatistics?.CompetitionsList?.ToList())" SelectedCompetition="@(FullStatistics?.SelectedCompetition)" CompetitionsOnClick="@(CompetitionsOnClick)" />
    </div>
    @if (isLoading)
    {
        <div style="position:relative;width:100%;height:100%;">
            <img src="images/icons/loadingicon.gif" style="position:absolute; width:3rem;top:calc(50% - 1.5rem);left:calc(50% - 1.5rem);" />
        </div>
    }
    else
    {
        if (FullStatistics?.CompetitionStatistic != null)
        {
            <div class="row" style="padding-top:10px;">
                <div class="statistics-title">
                    MÁLSKJÚTTAR<div class="statistics-border" />
                </div>
                <div class="statistics-title">
                    UPPLEGG<div class="statistics-border" />
                </div>
            </div>
            <div class="row flex-fill d-flex justify-content-start">
                <div class="col">
                    <div class="matches_container">
                        <table class="table text-white">
                            <tr>
                                <td style="vertical-align: top; padding: 0 2px; margin: 0 auto">
                                    @for (int i = 0; i < FullStatistics.CompetitionStatistic.GoalPlayers.Count; i++)
                                    {
                                        PlayersOfMatches player = FullStatistics.CompetitionStatistic.GoalPlayers[i];
                                        <table class="table player-list-item">
                                            <tr>
                                                <td class="statistics-number">@(string.Format("{0}.", i + 1))</td>
                                                <td class="player_name">
                                                    @player.FirstName<br />
                                                    <span style="color: gray">@player.TeamName</span>
                                                </td>
                                                <td class="statistics-goal">@player.Goal</td>
                                            </tr>
                                        </table>
                                    }
                                </td>
                                <td style="vertical-align:top;padding:0 2px;margin:0 auto">
                                    @for (int i = 0; i < FullStatistics.CompetitionStatistic.AssistPlayers.Count; i++)
                                    {
                                        PlayersOfMatches player = FullStatistics.CompetitionStatistic.AssistPlayers[i];
                                        <table class="table player-list-item">
                                            <tr>
                                                <td class="statistics-number">@(string.Format("{0}.", i + 1))</td>
                                                <td class="player_name">
                                                    @player.FirstName<br />
                                                    <span style="color: gray">@player.TeamName</span>
                                                </td>
                                                <td class="statistics-asist">@player.Assist</td>
                                            </tr>
                                        </table>
                                    }
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
</div>
    
@code {
    private FullStatisticModelView FullStatistics;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await DystirService.LoadCompetitionStatistics();
        await GetStatisticsList(string.Empty);
        DystirService.OnLoadData += LoadData;
        DystirService.OnUpdateData += UpdateData;
    }

    void IDisposable.Dispose()
    {
        DystirService.OnLoadData -= LoadData;
        DystirService.OnUpdateData -= UpdateData;
    }

    private void LoadData(object sender, EventArgs arg)
    {
        Refresh();
    }

    private void UpdateData(object sender, string matchDetailsJson)
    {
        Refresh();
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void CompetitionsOnClick(string competition)
    {
        isLoading = true;
        _ = GetStatisticsList(competition);
    }

    public async Task GetStatisticsList(string selectedCompetition)
    {
        await Task.Run(() =>
        {
            selectedCompetition = string.IsNullOrWhiteSpace(selectedCompetition) ? DystirService.StatisticCompetitions?.FirstOrDefault()?.CompetitionName ?? string.Empty : selectedCompetition;
            CompetitionStatistic competitionStatistic = DystirService.StatisticCompetitions?.FirstOrDefault(x => x.CompetitionName == selectedCompetition);
            FullStatisticModelView fullStatistics = new FullStatisticModelView()
            {
                SelectedCompetition = selectedCompetition,
                CompetitionsList = GetCompetitionsList(),
                CompetitionStatistic = competitionStatistic
            };
            FullStatistics = fullStatistics;
        });
        isLoading = false;
        Refresh();
    }

    private IEnumerable<string> GetCompetitionsList()
    {
        List<string> competitionsList = new List<string>();
        foreach (var statistic in DystirService.StatisticCompetitions ?? new ObservableCollection<CompetitionStatistic>())
        {
            competitionsList.Add(statistic.CompetitionName);
        }
        return competitionsList;
    }
    }
