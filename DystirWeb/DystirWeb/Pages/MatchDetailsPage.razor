@page "/football/matchdetails/{matchid}"

@using DystirWeb.Services
@using DystirWeb.Models
@using DystirWeb.ModelViews
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client;
@inject DystirService DystirService
@inject ClientService ClientService
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider BrowserDateTimeProvider
@layout MainFootballLayout
@implements IDisposable
@inherits MatchBase

<div class="container-match-details">
    <div class="box">
        <div class="matches_list_same_day">
            @foreach (Matches match in MatchesListSameDay ?? new List<Matches>())
            {
                <NavLink style="cursor:pointer;" @onclick="@(()=>isLoading = true)" href="@("football/matchdetails/" + match.MatchId)">
                    <Match MatchItem="@match" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" IsMatchForSameDayList="@true" />
                </NavLink>
            }
        </div>
    </div>
    <div class="box" style="padding:0.3rem 0">
        <Match MatchItem="@SelectedMatch" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" ShowMatchType="@true" />
    </div>
    <div class="box">
        <MatchDetailsTabs TabOnClick="OnTabClick" />
    </div>
    <div class="box box-scroll">
        <div style="position:absolute;top:0;bottom:0;width:100%;overflow:auto; margin: 0; padding: 0 5px;">
            <div class="@(selectedTab == "0" ? "active_tab" : "no_active_tab")">
                <SummaryView SummaryEventsOfMatch="@(fullMatchDetails?.Summary)" />
            </div>
            <div class="@(selectedTab == "1" ? "active_tab" : "no_active_tab")">
                <LineupsView PlayersOfMatch="@(fullMatchDetails?.MatchDetails?.PlayersOfMatch)" Match="@(fullMatchDetails?.MatchDetails?.Match)" />
            </div>
            <div class="@(selectedTab == "2" ? "active_tab" : "no_active_tab")">
                <CommentariesView Commentaries="@(fullMatchDetails?.Commentary)" />
            </div>
            <div class="@(selectedTab == "3" ? "active_tab" : "no_active_tab")">
                <StatisticView StatisticOfMatch="@(fullMatchDetails?.Statistics)" />
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div style="position:fixed; top:calc(50% - 1.5rem);left:calc(50% - 1.5rem);">
        <img src="images/icons/loadingicon.gif" style="width:3rem" />
    </div>
}

@code {
    [Parameter]
    public string matchid { get; set; }

    private Matches SelectedMatch = new Matches();
    private FullMatchDetailsModelView fullMatchDetails;
    private List<Matches> MatchesListSameDay = new List<Matches>();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedTab = "0";

    protected override async Task OnInitializedAsync()
    {
        //ClientService.DystirHubConnection.On<string, string>("UpdateCommand", (matchID, matchDetails) =>
        //{
        //    _ = UpdateMatchDetails(matchDetails);
        //});
        ClientService.OnConnected += ClientService_OnConnected;
        ClientService.OnReconnected += ClientService_OnReconnected;
        ClientService.OnUpdated += ClientService_OnUpdated;
        DystirService.OnConnected += HubConnection_OnConnected;
        var browserDateTime = await BrowserDateTimeProvider.GetInstance();
        int serverTimeZoneHours = TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow).Hours;
        int clientTimeZoneHours = browserDateTime.LocalTimeZoneInfo.BaseUtcOffset.Hours;
        timeZoneOffset = clientTimeZoneHours - serverTimeZoneHours;
    }

    protected override async Task OnParametersSetAsync()
    {
        int parseMatchID = int.TryParse(matchid, out int m) ? int.Parse(matchid) : 0;
        SelectedMatch = DystirService.AllMatches?.FirstOrDefault(x => x.MatchId == parseMatchID);
        _ = LoadMatchDetails();
        await Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        ClientService.OnConnected -= ClientService_OnConnected;
        ClientService.OnReconnected -= ClientService_OnReconnected;
        ClientService.OnUpdated -= ClientService_OnUpdated;
        DystirService.OnConnected -= HubConnection_OnConnected;
    }

    private async void ClientService_OnConnected()
    {
        await LoadMatchDetails();
    }

    private async void ClientService_OnReconnected()
    {
        await LoadMatchDetails();
    }
    private async void ClientService_OnUpdated(string matchIDForUpdate)
    {
        if (matchid == matchIDForUpdate)
        {
            await LoadMatchDetails();
        }  
        MatchesListSameDay = DystirService.GetMatchesListSameDay(SelectedMatch);
        Refresh();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadMatchDetails();
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTabClick(string tabIndex)
    {
        selectedTab = tabIndex;
    }

    public async Task LoadMatchDetails()
    {
        if (SelectedMatch != null)
        {
            fullMatchDetails = await DystirService.LoadMatchDetailsAsync(matchid);
            SelectedMatch = fullMatchDetails?.MatchDetails?.Match;
            MatchesListSameDay = fullMatchDetails?.MatchesListSelection;
        }
        isLoading = false;
        Refresh();
    }
}