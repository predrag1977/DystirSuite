@using DystirWeb.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading
@inject DystirService DystirService
@inject NavigationManager navigationManager
@inject ClientService ClientService
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase
@implements IDisposable

<div class="main">
    @Body
</div>

@if (!IsDystirHubConnected)
{
    <div style="position:fixed; top:calc(50% - 1.5rem);left:calc(50% - 1.5rem);">
        <img src="images/icons/loadingicon.gif" style="width:3rem" />
    </div>
}

@code
{
    public bool IsDystirHubConnected { get; set; }
    private DotNetObjectReference<ClientService> clientServiceRef;

    protected override async Task OnInitializedAsync()
    {
        ClientService.OnConnected += ClientService_OnConnected;
        ClientService.OnReconnected += ClientService_OnReconnected;
        ClientService.OnDisconnected += ClientService_OnDisconnected;
        DystirService.OnConnected += DystirService_OnConnected;
        DystirService.OnDisconnected += DystirService_OnDisconnected;
        IsDystirHubConnected = DystirService?.DystirHub?.DystirHubConnection?.State == HubConnectionState.Connected;
        Refresh();
        clientServiceRef = DotNetObjectReference.Create(ClientService);
        await JSRuntime.InvokeAsync<object>("initClientService", clientServiceRef);
    }

    void IDisposable.Dispose()
    {
        ClientService.OnConnected -= ClientService_OnConnected;
        ClientService.OnReconnected -= ClientService_OnReconnected;
        ClientService.OnDisconnected -= ClientService_OnDisconnected;
        DystirService.OnConnected -= DystirService_OnConnected;
        DystirService.OnDisconnected -= DystirService_OnDisconnected;
        clientServiceRef?.Dispose();
    }

    private async void ClientService_OnConnected()
    {
        IsDystirHubConnected = true;
        Refresh();
        await Task.CompletedTask;
    }

    private async void ClientService_OnReconnected()
    {
        IsDystirHubConnected = true;
        Refresh();
        await Task.CompletedTask;
    }

    private async void ClientService_OnDisconnected()
    {
        IsDystirHubConnected = false;
        Refresh();
        await Task.CompletedTask;
    }

    private void DystirService_OnConnected()
    {
        IsDystirHubConnected = true;
        Refresh();
    }

    private void DystirService_OnDisconnected()
    {
        IsDystirHubConnected = false;
        Refresh();
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }
}