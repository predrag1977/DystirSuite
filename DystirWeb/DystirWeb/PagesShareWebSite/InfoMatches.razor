@page "/infomatches"

@using DystirWeb.Models
@using DystirWeb.Services
@using Microsoft.AspNetCore.SignalR.Client;
@inject DystirService DystirService
@inject TimeService TimeService
@inject HubConnection HubConnection
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider BrowserDateTimeProvider
@layout MainShareWebSiteLayout
@implements IDisposable

<table class="table" style="width:100%;height:100%;">
    <tr>
        <td style="position:relative;width:100%;height:auto;padding:0;vertical-align:middle;">
            <div id="header-match-list box" style="overflow:hidden; margin:3px 0">
                <table class="table">
                    <tr>
                        @foreach (var matchesGroup in SelectedMatchListGroup)
                        {
                            var matches = matchesGroup.Select(x => x);
                            <td style="padding-left:0px;">
                                <div class="competition-item tab @(selectedCompetitionName == matchesGroup.Key ? "selected_tab" : "")" @onclick="(() => OnCompetitionClick(matchesGroup.Key))">@(matchesGroup.Key?.ToUpper())</div>
                            </td>
                        }
                    </tr>
                </table>
                <table class="table" style="border-collapse: separate; border-spacing: 4px 0;">
                    <tr>
                        @foreach (var matchesGroup in SelectedMatchListGroup)
                        {
                            if (selectedCompetitionName == matchesGroup.Key)
                            {
                                var matches = matchesGroup.Select(x => x);
                                @foreach (Matches match in matches)
                                {
                                    <td>
                                        <NavLink class="nav-link" style="cursor: pointer;" target="_new" href="@("infomatchdetails/" + match.MatchID)">
                                            <MatchShare MatchItem="@match" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" />
                                        </NavLink>
                                    </td>
                                }
                            }
                        }
                    </tr>
                </table>
                @if (SelectedMatchListGroup == null || SelectedMatchListGroup?.Count == 0)
                {
                    <div style="width:100%;text-align:center;padding:35px;background-color:white">Eingin dystur í dag</div>
                }
            </div>
        </td>
    </tr>
</table>

@if (isLoading)
{
    <div style="position:fixed; top:calc(50% - 1.5rem);left:calc(50% - 1.5rem);">
        <img src="images/icons/loadingicon.gif" style="width:3rem" />
    </div>
}

@code {
    private List<IGrouping<string, Matches>> SelectedMatchListGroup = new List<IGrouping<string, Matches>>();
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedCompetitionName = "";

    protected override async Task OnInitializedAsync()
    {
        DystirService.OnConnected += HubConnection_OnConnected;
        TimeService.OnTimerElapsed += TimerElapsed;
        HubConnection.On<string>("UpdateCommand", (matchID) =>
        {
            _ = GetSelectedMatchListGroup();
        });
        var browserDateTime = await BrowserDateTimeProvider.GetInstance();
        int serverTimeZoneHours = TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow).Hours;
        int clientTimeZoneHours = browserDateTime.LocalTimeZoneInfo.BaseUtcOffset.Hours;
        timeZoneOffset = clientTimeZoneHours - serverTimeZoneHours;
        _ = GetSelectedMatchListGroup();
    }

    void IDisposable.Dispose()
    {
        DystirService.OnConnected -= HubConnection_OnConnected;
        TimeService.OnTimerElapsed -= TimerElapsed;
    }

    private async void HubConnection_OnConnected()
    {
        await GetSelectedMatchListGroup();
    }

    private void TimerElapsed(object sender, EventArgs e)
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            InvokeAsync(() => StateHasChanged());
        }
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnCompetitionClick(string competitionName)
    {
        selectedCompetitionName = competitionName;
        Refresh();
    }

    public async Task GetSelectedMatchListGroup()
    {
        await Task.Run(() =>
        {
            var fromDate = DateTime.UtcNow.AddHours(timeZoneOffset).Date.AddDays(0);
            var toDate = fromDate.AddDays(0);
            SelectedMatchListGroup = DystirService.AllMatches?
            .OrderBy(x => x.MatchTypeID).ThenBy(x => x.Time).ThenBy(x => x.MatchID)
            .Where(x => x.Time.Value.ToLocalTime().Date >= fromDate && x.Time.Value.ToLocalTime().Date <= toDate)
            .GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();
            if (string.IsNullOrWhiteSpace(selectedCompetitionName))
            {
                selectedCompetitionName = SelectedMatchListGroup?.FirstOrDefault()?.Key ?? "";
            }
        });
        isLoading = false;
        Refresh();
    }
}
