@page "/infomatchdetails/{matchid}"

@using DystirWeb.Services
@using DystirWeb.Models
@using DystirWeb.ModelViews
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using DystirWeb.Pages
@using Microsoft.AspNetCore.SignalR.Client;
@inject DystirService DystirService
@inject ClientService ClientService
@inject Blazored.Localisation.Services.IBrowserDateTimeProvider BrowserDateTimeProvider
@layout MainShareWebSiteLayout
@implements IDisposable
@inherits MatchBase

<div style="width:100%; position:absolute; height:60px; background-color:white; z-index:-1" />

<div style="background-color:#f5f5f5; height:100%; margin:0 auto; max-width:1200px;">
    <div class="container-match-details">
        <table class="box" style="width:100%; height:60px; background-color:white;">
            <tr>
                <td style="text-align:left;width:600px">
                    <a style="text-decoration:none;" href="https://www.in.fo" target="_blank">
                        <img src="https://www.in.fo/fileadmin/templates/ext/bootstrap_package/Resources/Public/Images/logo/info-logo.svg" style="height: 45px;margin:auto 20px;" />
                    </a>
                </td>
                <td style="text-align:right;width:600px">
                    <a style="text-decoration:none;" href="https://www.dystir.fo" target="_blank">
                        <img src="https://www.dystir.fo/images/icons/dystir_icon.png" style="height:50px;margin:auto 20px; border-radius:10px;" />
                    </a>
                </td>
            </tr>
        </table>

        <div id="header-match-list box" style="overflow:hidden; margin:3px 0">
            <table class="table">
                <tr>
                    @foreach (var matchesGroup in SelectedMatchListGroup)
                    {
                        var matches = matchesGroup.Select(x => x);
                        <td style="padding-left:0px;">
                            <div class="competition-item tab @(selectedCompetitionName == matchesGroup.Key ? "selected_tab" : "")" @onclick="(() => OnCompetitionClick(matchesGroup.Key))">@(matchesGroup.Key?.ToUpper())</div>
                        </td>
                    }
                </tr>
            </table>
            <table class="table" style="border-collapse: separate; border-spacing: 4px 0;">
                <tr>
                    @foreach (var matchesGroup in SelectedMatchListGroup)
                    {
                        if (selectedCompetitionName == matchesGroup.Key)
                        {
                            var matches = matchesGroup.Select(x => x);
                            @foreach (Matches match in matches)
                            {
                                <td>
                                    <NavLink class="nav-link" style="cursor: pointer;" href="@("infomatchdetails/" + match.MatchId)">
                                        <MatchShare MatchItem="@match" ShowMore="@(false)" TimeZoneOffset="@timeZoneOffset" />
                                    </NavLink>
                                </td>
                            }
                        }
                    }
                </tr>
            </table>
            @if (SelectedMatchListGroup == null || SelectedMatchListGroup?.Count == 0)
            {
                <div style="width:100%;text-align:center;padding:35px;background-color:white">Eingin dystur í dag</div>
            }
        </div>

        <div class="box" style="padding:0 3px">
            <MatchShare MatchItem="@SelectedMatch" ShowMore="@(true)" TimeZoneOffset="@timeZoneOffset" />
        </div>

        <div class="box">
            <MatchDetailsTabs TabOnClick="OnTabClick" />
        </div>

        <div class="box box-scroll" style="background-color:white">
            <div style="position:absolute;top:0;bottom:0;width:100%;overflow:auto; margin: 0; padding: 0 5px;">
                <div class="@(selectedTab == "0" ? "active_tab" : "no_active_tab")">
                    <SummaryView SummaryEventsOfMatch="@(fullMatchDetails?.Summary)" />
                </div>
                <div class="@(selectedTab == "1" ? "active_tab" : "no_active_tab")">
                    <LineupsView PlayersOfMatch="@(fullMatchDetails?.MatchDetails?.PlayersOfMatch)" Match="@(fullMatchDetails?.MatchDetails?.Match)" />
                </div>
                <div class="@(selectedTab == "2" ? "active_tab" : "no_active_tab")">
                    <CommentariesView Commentaries="@(fullMatchDetails?.Commentary)" />
                </div>
                <div class="@(selectedTab == "3" ? "active_tab" : "no_active_tab")">
                    <StatisticView StatisticOfMatch="@(fullMatchDetails?.Statistics)" />
                </div>
            </div>
        </div>
    </div>
</div>

@if (isLoading)
{
    <div style="position:fixed; top:calc(50% - 1.5rem);left:calc(50% - 1.5rem);">
        <img src="images/icons/loadingicon.gif" style="width:3rem" />
    </div>
}

@code {
    [Parameter]
    public string matchid { get; set; }

    private List<IGrouping<string, Matches>> SelectedMatchListGroup = new List<IGrouping<string, Matches>>();
    private Matches SelectedMatch = new Matches();
    private FullMatchDetailsModelView fullMatchDetails;
    private int timeZoneOffset = 0;
    private bool isLoading = true;
    private string selectedTab = "0";
    private string selectedCompetitionName = "";

    protected override async Task OnInitializedAsync()
    {
        ClientService.OnConnected += ClientService_OnConnected;
        ClientService.OnReconnected += ClientService_OnReconnected;
        ClientService.OnUpdated += ClientService_OnUpdated;
        DystirService.OnConnected += HubConnection_OnConnected;
        var browserDateTime = await BrowserDateTimeProvider.GetInstance();
        int serverTimeZoneHours = TimeZoneInfo.Local.GetUtcOffset(DateTime.UtcNow).Hours;
        int clientTimeZoneHours = browserDateTime.LocalTimeZoneInfo.BaseUtcOffset.Hours;
        timeZoneOffset = clientTimeZoneHours - serverTimeZoneHours;
    }

    protected override async Task OnParametersSetAsync()
    {
        int parseMatchID = int.TryParse(matchid, out int m) ? int.Parse(matchid) : 0;
        SelectedMatch = DystirService.AllMatches?.FirstOrDefault(x => x.MatchId == parseMatchID);
        selectedCompetitionName = SelectedMatch?.MatchTypeName ?? string.Empty;
        _ = LoadMatchDetails();
        await Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        ClientService.OnConnected -= ClientService_OnConnected;
        ClientService.OnReconnected -= ClientService_OnReconnected;
        ClientService.OnUpdated -= ClientService_OnUpdated;
        DystirService.OnConnected -= HubConnection_OnConnected;
    }

    private async void ClientService_OnConnected()
    {
        await LoadMatchDetails();
    }

    private async void ClientService_OnReconnected()
    {
        await LoadMatchDetails();
    }

    private async void HubConnection_OnConnected()
    {
        await LoadMatchDetails();
    }

    private async void ClientService_OnUpdated(string matchIDForUpdate)
    {
        if (matchid == matchIDForUpdate)
        {
            await LoadMatchDetails();
        }
        await GetSelectedMatchListGroup();
        Refresh();
    }

    private void Refresh()
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void OnTabClick(string tabIndex)
    {
        selectedTab = tabIndex;
    }

    private void OnCompetitionClick(string competitionName)
    {
        selectedCompetitionName = competitionName;
        Refresh();
    }

    private Matches GetSelelectedMatch()
    {
        return DystirService.AllMatches.FirstOrDefault(x => x.MatchId == int.Parse(matchid));
    }

    public async Task LoadMatchDetails()
    {
        if (SelectedMatch != null)
        {
            fullMatchDetails = await DystirService.LoadMatchDetailsAsync(matchid);
            SelectedMatch = fullMatchDetails?.MatchDetails?.Match;
            await GetSelectedMatchListGroup();
        }
        isLoading = false;
        Refresh();
    }

    public async Task GetSelectedMatchListGroup()
    {
        await Task.Run(() =>
        {
            var fromDate = DateTime.UtcNow.AddHours(timeZoneOffset).Date.AddDays(0);
            var toDate = fromDate.AddDays(0);
            SelectedMatchListGroup = DystirService.AllMatches?
            .OrderBy(x => x.MatchTypeId).ThenBy(x => x.Time).ThenBy(x => x.MatchId)
            .Where(x => x.Time.Value.ToLocalTime().Date >= fromDate && x.Time.Value.ToLocalTime().Date <= toDate)
            .GroupBy(x => x.MatchTypeName)?.ToList() ?? new List<IGrouping<string, Matches>>();
            if (string.IsNullOrWhiteSpace(selectedCompetitionName))
            {
                selectedCompetitionName = SelectedMatchListGroup?.FirstOrDefault()?.Key ?? "";
            }
        });
    }
}